/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package chess

import chess.common.model.Game
import chess.common.model.players.BlackPlayer
import chess.common.model.players.WhitePlayer
import org.junit.jupiter.api.AfterEach
import org.junit.jupiter.api.Assertions.assertTrue
import org.junit.jupiter.api.Test
import java.io.ByteArrayInputStream
import kotlin.test.assertEquals

class AppTest {
    private val originalIn = System.`in`
    private val originalOut = System.out

    @AfterEach
    fun tearDown() {
        System.setIn(originalIn)
        System.setOut(originalOut)
    }

    @Test
    fun `startGame function should create a game with the correct players`() {
        provideInput("q")
        // Run startGame with "white" player
        startGame("white")

        // Assert that a game with WhitePlayer and BlackPlayer is created
        // You need to have appropriate methods in the Game class to check the players
        val game = Game.getCurrentGame()
        assertTrue(game?.firstPlayer is WhitePlayer)
        assertTrue(game?.secondPlayer is BlackPlayer)
    }

    @Test
    fun `white checkmates in 4 moves`() {
        provideInput("white", "e2-e4", "f7-f5", "e4-f5", "g7-g5", "d1-h5", "q")

        main()

        val game = Game.getCurrentGame()
        assertTrue(game?.firstPlayer is WhitePlayer)
        assertTrue(game?.secondPlayer is BlackPlayer)

        game?.firstPlayer?.let { assertTrue(it.winner) }
    }

    @Test
    fun `black checkmates in 3 moves`() {
        provideInput("white", "f2-f4", "e7-e6", "g2-g4", "d8-h4", "q")

        main()

        val game = Game.getCurrentGame()
        assertTrue(game?.firstPlayer is WhitePlayer)
        assertTrue(game?.secondPlayer is BlackPlayer)

        game?.secondPlayer?.let { assertTrue(it.winner) }
    }

    @Test
    fun `black checkmates in 2 moves`() {
        provideInput("white", "d2-d3", "f7-f6", "e2-e4", "g7-g5", "d1-h5", "q")

        main()

        val game = Game.getCurrentGame()
        assertTrue(game?.firstPlayer is WhitePlayer)
        assertTrue(game?.secondPlayer is BlackPlayer)

        game?.firstPlayer?.let { assertTrue(it.winner) }
    }

    @Test
    fun `the queen's gambit`() {
        provideInput("white", "d2-d4", "d7-d5", "c2-c4", "d5-c4", "q")

        main()

        val game = Game.getCurrentGame()
        assertTrue(game?.firstPlayer is WhitePlayer)
        assertTrue(game?.secondPlayer is BlackPlayer)

        val board = game!!.board.board
        val pieceFinalPosition = game.secondPlayer.selectedPiece!!.position
        val pieceInitialPosition = game.secondPlayer.destinationPiece!!.position

        assertEquals(
            "black_pawn",
            board[
                8 - pieceFinalPosition.row,
            ][pieceFinalPosition.column.toColumnNumber()].name,
        )
        assertEquals(
            "empty",
            board[8 - pieceInitialPosition.row][pieceInitialPosition.column.toColumnNumber()].name,
        )
    }

    @Test
    fun `Kasparov vs Topalov, Wijk aan Zee 1999 game play test`() {
        provideInput(
            "white",
            "e2-e4",
            "d7-d6",
            "d2-d4",
            "g8-f6",
            "b1-c3",
            "g7-g6",
            "c1-e3",
            "f8-g7",
            "d1-d2",
            "c7-c6",
            "f2-f3",
            "b7-b5",
            "g1-e2",
            "b8-d7",
            "e3-h6",
            "g7-h6",
            "d2-h6",
            "c8-b7",
            "a2-a3",
            "e7-e5",
            "e1-c1",
            "d8-e7",
            "c1-b1",
            "a7-a6",
            "e2-c1",
            "e8-c8",
            "c1-b3",
            "e5-d4",
            "d1-d4",
            "c6-c5",
            "d4-d1",
            "d7-b6",
            "g2-g3",
            "c8-b8",
            "b3-a5",
            "b7-a8",
            "f1-h3",
            "d6-d5",
            "h6-f4",
            "b8-a7",
            "h1-e1",
            "d5-d4",
            "c3-d5",
            "b6-d5",
            "e4-d5",
            "e7-d6",
            "d1-d4",
            "c5-d4",
            "e1-e7",
            "a7-b6",
            "f4-d4",
            "b6-a5",
            "b2-b4",
            "a5-a4",
            "d4-c3",
            "d6-d5",
            "e7-a7",
            "a8-b7",
            "a7-b7",
            "d5-c4",
            "c3-f6",
            "a4-a3",
            "f6-a6",
            "a3-b4",
            "c2-c3",
            "b4-c3",
            "a6-a1",
            "c3-d2",
            "a1-b2",
            "d2-d1",
            "h3-f1",
            "d8-d2",
            "b7-d7",
            "d2-d7",
            "f1-c4",
            "b5-c4",
            "b2-h8",
            "d7-d3",
            "h8-a8",
            "c4-c3",
            "a8-a4",
            "d1-e1",
            "f3-f4",
            "f7-f5",
            "b1-c1",
            "d3-d2",
            "a4-a7",
            "q",
        )

        main()

        val game = Game.getCurrentGame()
        assertTrue(game?.firstPlayer is WhitePlayer)
        assertTrue(game?.secondPlayer is BlackPlayer)

        val board = game!!.board.board
        val pieceFinalPosition = game.firstPlayer.selectedPiece!!.position
        val pieceInitialPosition = game.firstPlayer.destinationPiece!!.position

        assertEquals(
            "white_queen",
            board[
                8 - pieceFinalPosition.row,
            ][pieceFinalPosition.column.toColumnNumber()].name,
        )
        assertEquals(
            "empty",
            board[8 - pieceInitialPosition.row][pieceInitialPosition.column.toColumnNumber()].name,
        )
    }

    private fun provideInput(vararg inputs: String) {
        System.setIn(ByteArrayInputStream(inputs.joinToString("\n").toByteArray()))
    }
}
